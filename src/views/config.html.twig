{% extends "_layout.html.twig" %}
{% set title = t.get('Configuration') %}
{% block content %}

    <style type="text/css">
        label.cfg {
            width: 150px;
            display: inline-block;
        }

        form.configuration-form input[type="text"] {
            width: 550px;
            display: inline-block;
        }

        form.configuration-form fieldset {
            margin-bottom: 10px;
        }

        form.configuration-form fieldset legend, form.configuration-form fieldset label {
            text-transform: capitalize;
        }
    </style>

    <div style="width: 800px; margin: auto; text-align: left;">
            <form action="api/config" method="post" class="configuration-form">

                <fieldset>
                    <legend>&nbsp;{{ t.get('system') }}&nbsp;</legend>

                    <label class="cfg" title="interface language"
                           for="system_language">{{ t.get('language') }}</label>
                    <select name="system_language" id="system_language">
                        {% for v,txt in SUPPORTED_VALUES.system_language %}
                            {% set selected = (config.system.language == v) ? 'selected="selected"' : '' %}
                            <option {{ selected }} value="{{ v }}">{{ txt }}</option>
                        {% endfor %}
                    </select> (ICU support: <a href="http://site.icu-project.org/">v.{{ INTL_ICU_VERSION }}</a>)
                    <br/><br/>

                    <label class="cfg" title="library theme" for="system_theme">{{ t.get('theme') }}</label>
                    <select name="system_theme" id="system_theme">
                        {% for v in SUPPORTED_VALUES.system_theme %}
                            {% set selected = config.system.theme == v ? 'selected="selected"' : '' %}
                            <option {{ selected }} value="{{ v }}">{{ v }}</option>
                        {% endfor %}
                    </select>
                    <br/><br/>

                    <label class="cfg">{{ t.get('time zone') }}</label>
                    <select name="system_timezone" id="system_timezone"
                            title="PHP timezone used to show and store data">
                        {% for v in timeZones %}
                            {% set selected = (config.system.timezone == v ? 'selected="selected"' : '') %}
                            <option {{ selected }} value="{{ v }}">{{ v }}</option>
                        {% endfor %}
                    </select>

                </fieldset>


                <fieldset>
                    <legend>&nbsp;{{ t.get('library') }}&nbsp;</legend>

                    <label class="cfg">{{ t.get('directory') }}</label>
                    <input name="library_directory" id="library_directory" type="text"
                           title="Location of your books. Must end with '\' or '/' "
                           value="{{ config.library.directory }}"/>
                    <br/><br/>

                    <label class="cfg">{{ t.get('syncronization') }}</label>
                    <div style="display: inline-block;" id="library_sync">
                        <input type="radio" id="library_sync1" name="library_sync"
                               value="1" {{ config.library.sync == true ? 'checked="checked"' : '' }} />
                        <label for="library_sync1">{{ t.get('yes') }}</label>
                        <input type="radio" id="library_sync2" name="library_sync"
                               value="0" {{ config.library.sync == false ? 'checked="checked"' : '' }} />
                        <label for="library_sync2">{{ t.get('no') }}</label>
                    </div>
                    <br/><br/>

                </fieldset>


                <fieldset>
                    <legend>&nbsp;{{ t.get('database') }}&nbsp;</legend>

                    <label class="cfg" for="database_format">{{ t.get('DB format') }}</label>
                    <select id="database_format" name="database_format">
                        {% for v, txt in SUPPORTED_DATABASES %}
                            {% set selected = (config.database.format == v ? 'selected="selected"' : '') %}
                            <option {{ selected }} value="{{ v }}">{{ txt }}</option>
                        {% endfor %}
                    </select>
                    <br/><br/>

                    <fieldset id="database_format_sqlite">
                        <label class="cfg" for="database_filename">{{ t.get('file') }}</label>
                        <input name="database_filename" id="database_filename" type="text"
                               value="{{ config.database.filename }}"/>
                    </fieldset>

                    <fieldset id="database_format_mysql">
                        <label class="cfg" for="database_dbname">{{ t.get('dbname') }}</label>
                        <input name="database_dbname" id="database_dbname" type="text"
                               value="{{ config.database.dbname }}"/>
                        <label class="cfg" for="database_host">{{ t.get('host') }}</label>
                        <input name="database_host" id="database_host" type="text" value="{{ config.database.host }}"/>
                        <label class="cfg" for="database_login">{{ t.get('login') }}</label>
                        <input name="database_login" id="database_login" type="text"
                               value="{{ config.database.login }}"/>
                        <label class="cfg" for="database_password">{{ t.get('password') }}</label>
                        <input name="database_password" id="database_password" type="text"
                               value="{{ config.database.password }}"/>
                    </fieldset>
                    <br/><br/>

                </fieldset>

                <fieldset>
                    <legend>{{ t.get('book') }}</legend>

                    <label class="cfg">{{ t.get('name format') }}</label>
                    <input name="book_nameformat" id="book_nameformat" type="text" value="{{ config.book.nameformat }}"
                           title="tags are limited to {year}, {title}, {publisher}, {author}, {isbn13}, {ext}"/>
                    <br/><br/>
                    <label class="cfg">{{ t.get('cover type') }}</label>
                    <select name="book_covertype" id="book_covertype"
                            title="All images will be saved as JPEG to database">
                        <option>{{ config.book.covertype }}</option>
                    </select>
                    <br/><br/>
                    <label class="cfg" for="book_covermaxwidth">{{ t.get('cover max width, px') }}</label>
                    <input id="book_covermaxwidth" name="book_covermaxwidth" type="text"
                           value="{{ config.book.covermaxwidth }}"/>
                    <br/><br/>
                    <label class="cfg">{{ t.get('GhostScript EXE') }}</label>
                    <input id="book_ghostscript" name="book_ghostscript" type="text"
                           value="{{ config.book.ghostscript }}"
                           title="Provide to get option to extract book cover from PDF file"/>
                </fieldset>

            </form>
            <div id="result-message"></div>
    </div>

    <script>
      $(document).tooltip()

      // JQuery fix for empty body on JSON response
      $.ajaxSetup({
        converters: {
          'text json' : function(response) {
            return (response === '') ? null : JSON.parse(response);
          },
        },
      });
      
      // CONFIGURATION PARAMS
      //
      // radio buttons
      //
      //$("#system_email, #library_sync, #system_debug").buttonset()
      $('input[name="system_email"], input[name="library_sync"], input[name="system_debug"]').on('click', function (e) {
        saveParameter(this)
      })
      //
      // text inputs
      //
      $("#system_emailto, #system_language, #system_theme, #system_timezone, #system_sessionpath, #library_directory, input[id^='database_'], input[id^='book_']")
        .on('focusout', function (e) {

          if ($(this).attr('id') === 'book_ghostscript') {
            if ($(this).val() === '') {
              // disable button instantly
              $('#sync-import-new-cover-from-pdf').button("option", "disabled", true)
            } else {
              // enable button instantly
              $('#sync-import-new-cover-from-pdf').button("option", "disabled", false)
            }
          }

          saveParameter(this)
        })

      //
      // db switch
      //
      $('#database_format').on('change', function (e) {
        var format = $(this).val()
        console.log('database_format change ' + $(this).val())
        toggleDbForm(format)
      })
      toggleDbForm($('#database_format').val())

      function toggleDbForm(format) {
        $('[id^="database_format_"]').hide()
        $('#database_format_' + format).show()
      }

      $.fn.extend({
        setMsg: function (message, field, result = true) {
          if (message === '') {
            return
          }

          let state = (result === true ? 'highlight' : 'error')
          let icon = (result === true ? 'info' : 'alert')

          this.html(
            '<div class="ui-state-' + state + ' ui-corner-all" style="padding: 10px; margin-top: 20px; margin-bottom: 20px;">' +
            '<p><span class="ui-icon ui-icon-' + icon + '" style="float: left; margin-right: .3em;"></span> ' +
            '<b>' + field + '</b>&nbsp;&nbsp; ' + message + '</p>' +
            '</div>')
        }
      })


      function saveParameter(e) {
        let action_url = $(e).closest("form").attr('action')
        let field = $(e).attr('name')
        let value = $(e).val()

        $.post(action_url, {field: field, value: value}, function (response) {
            $('#result-message').setMsg('Field was successfully updated', field)
            if (field === 'system_theme' || field === 'system_language') {
              location.reload()
            }
          },
          'json')
          .fail(function (response) {
            if (response.status === 500) {
              let exception = response.responseJSON[0]
              $('#result-message').setMsg(exception.message, field, false)
            } else {
              console.error('failed', response)
            }
          })
      }
    </script>
{% endblock %}